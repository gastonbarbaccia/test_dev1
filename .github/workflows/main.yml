name: DevOps Pipeline

# Crear las siguientes variables como secrets dentro del settings del proyecto
# TOKEN_GITHUB es un token de github que se puede crear con otro nombre de ser necesario, recordar colocar el nombre en el main.yml
# SONAR_TOKEN es un token que se genera en sonarcloud
# FTP_SERVER_STG servidor de hostinger
# FTP_USERNAME_STG usuario de ftp de hostinger
# FTP_PASSWORD_STG contraseña del usuario de ftp
# FTP_SERVER_PRD servidor de hostinger
# FTP_USERNAME_PRD usuario de ftp de hostinger
# FTP_PASSWORD_PRD contraseña del usuario de ftp
# Author: Gaston Barbaccia

on:
  push:
    branches:
      - develop

  pull_request:
    branches:
      - main


jobs:
  gitleaks:
      name: Gitleaks
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0
        - uses: gastonbarbaccia/gitleaks@v2.1
          env:
            GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        - name: Get the output from the gitleaks step
          run: |
            echo "exitcode: ${{ steps.gitleaks.outputs.exitcode }}"
            echo "result: ${{ steps.gitleaks.outputs.result }}"
            echo "output: ${{ steps.gitleaks.outputs.output }}"
            echo "command: ${{ steps.gitleaks.outputs.command }}"
            echo "report: ${{ steps.gitleaks.outputs.report }}"
        - name: Upload SARIF report
          if: steps.gitleaks.outputs.exitcode == 1
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: ${{ steps.gitleaks.outputs.report }} 

  copy_paste_detector:
    name: Copy Paste Detector
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: PHP Copy Paste Detector
        uses: StephaneBour/actions-php-cpd@1.0
        with:
          dir: "src/"

  phpstan:
    name: PHP Stan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: php-actions/phpstan@v3
        with:
          path: "src/"
          memory_limit: 256M

  php_lint:
    name: PHP Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: PHP Syntax Checker (Lint)
        uses: StephaneBour/actions-php-lint@7.4
        with:
          dir: "src/"

  sonarcloud:
    name: Sonarcloud
    runs-on: ubuntu-latest
    needs: [gitleaks,copy_paste_detector, phpstan, php_lint]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: src/  

  dependency_check:
    name: Dependency check Scan
    runs-on: ubuntu-latest
    needs: [gitleaks,copy_paste_detector, phpstan, php_lint]
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: "test"
          path: "src/"
          format: "HTML"
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
          name: Depcheck report
          path: ${{github.workspace}}/reports

  Import_SQL:
    runs-on: ubuntu-latest
    name: MySQL Deploy Action
    needs: [sonarcloud,dependency_check]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: gtadam/mysql-deploy-action@v1
        with:
            DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
            DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_SCRIPT: script.sql 
          
            
  deploy_staging:
    name: Deploy Staging
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [Import_SQL]
    environment: 
      name: staging
      #url:
    steps:
      - uses: actions/checkout@v2
      - name: Upload ftp
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host: ${{ secrets.FTP_SERVER_STG }}
          user: ${{ secrets.FTP_USERNAME_STG }}
          password: ${{ secrets.FTP_PASSWORD_STG }}
          localDir: "src/"
          remoteDir: "."

  
  deploy_production:
    name: Deploy Production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [Import_SQL]
    environment: 
      name: production
      #url: 
    steps:
      - uses: actions/checkout@v2
      - name: Upload ftp
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host: ${{ secrets.FTP_SERVER_PRD }}
          user: ${{ secrets.FTP_USERNAME_PRD }}
          password: ${{ secrets.FTP_PASSWORD_PRD }}
          localDir: "src/"
          remoteDir: "."
